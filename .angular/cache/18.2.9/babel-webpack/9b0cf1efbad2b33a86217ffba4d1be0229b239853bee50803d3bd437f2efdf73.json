{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { numberAttribute, booleanAttribute, Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * Determinte if argument TreeKeyManager is the NoopTreeKeyManager. This function is safe to use with SSR.\n */\nfunction isNoopTreeKeyManager(keyManager) {\n  return !!keyManager._isNoopTreeKeyManager;\n}\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends CdkTreeNode {\n  /**\n   * The tabindex of the tree node.\n   *\n   * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n   *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n   *   an unexpected state. Tabindex to be removed in a future version.\n   * @breaking-change 21.0.0 Remove this attribute.\n   */\n  get tabIndexInputBinding() {\n    return this._tabIndexInputBinding;\n  }\n  set tabIndexInputBinding(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndexInputBinding = value;\n  }\n  _getTabindexAttribute() {\n    if (isNoopTreeKeyManager(this._tree._keyManager)) {\n      return this.tabIndexInputBinding;\n    }\n    return this._tabindex;\n  }\n  /**\n   * Whether the component is disabled.\n   *\n   * @deprecated This is an alias for `isDisabled`.\n   * @breaking-change 21.0.0 Remove this input\n   */\n  get disabled() {\n    return this.isDisabled;\n  }\n  set disabled(value) {\n    this.isDisabled = value;\n  }\n  constructor(elementRef, tree,\n  /**\n   * The tabindex of the tree node.\n   *\n   * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n   *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n   *   an unexpected state. Tabindex to be removed in a future version.\n   * @breaking-change 21.0.0 Remove this attribute.\n   */\n  tabIndex) {\n    super(elementRef, tree);\n    /**\n     * The default tabindex of the tree node.\n     *\n     * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n     *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n     *   an unexpected state. Tabindex to be removed in a future version.\n     * @breaking-change 21.0.0 Remove this attribute.\n     */\n    this.defaultTabIndex = 0;\n    this.tabIndexInputBinding = Number(tabIndex) || this.defaultTabIndex;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static {\n    this.ɵfac = function MatTreeNode_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNode,\n      selectors: [[\"mat-tree-node\"]],\n      hostAttrs: [1, \"mat-tree-node\"],\n      hostVars: 5,\n      hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatTreeNode_click_HostBindingHandler() {\n            return ctx._focusItem();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"tabindex\", ctx._getTabindexAttribute());\n          i0.ɵɵattribute(\"aria-expanded\", ctx._getAriaExpanded())(\"aria-level\", ctx.level + 1)(\"aria-posinset\", ctx._getPositionInSet())(\"aria-setsize\", ctx._getSetSize());\n        }\n      },\n      inputs: {\n        tabIndexInputBinding: [2, \"tabIndex\", \"tabIndexInputBinding\", value => value == null ? 0 : numberAttribute(value)],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n      },\n      outputs: {\n        activation: \"activation\",\n        expandedChange: \"expandedChange\"\n      },\n      exportAs: [\"matTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      outputs: ['activation', 'expandedChange'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node',\n        '[attr.aria-expanded]': '_getAriaExpanded()',\n        '[attr.aria-level]': 'level + 1',\n        '[attr.aria-posinset]': '_getPositionInSet()',\n        '[attr.aria-setsize]': '_getSetSize()',\n        '(click)': '_focusItem()',\n        '[tabindex]': '_getTabindexAttribute()'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.CdkTree\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    tabIndexInputBinding: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? 0 : numberAttribute(value),\n        alias: 'tabIndex'\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTreeNodeDef_BaseFactory;\n      return function MatTreeNodeDef_Factory(__ngFactoryType__) {\n        return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(__ngFactoryType__ || MatTreeNodeDef);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodeDef,\n      selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n      inputs: {\n        when: [0, \"matTreeNodeDefWhen\", \"when\"],\n        data: [0, \"matTreeNode\", \"data\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: [{\n        name: 'when',\n        alias: 'matTreeNodeDefWhen'\n      }],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }],\n      standalone: true\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /**\n   * Whether the node is disabled.\n   *\n   * @deprecated This is an alias for `isDisabled`.\n   * @breaking-change 21.0.0 Remove this input\n   */\n  get disabled() {\n    return this.isDisabled;\n  }\n  set disabled(value) {\n    this.isDisabled = value;\n  }\n  /** Tabindex of the node. */\n  get tabIndex() {\n    return this.isDisabled ? -1 : this._tabIndex;\n  }\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value;\n  }\n  constructor(elementRef, tree, differs,\n  // Ignore tabindex attribute. MatTree manages its own active state using TreeKeyManager.\n  // Keeping tabIndex in constructor for backwards compatibility with trees created before\n  // introducing TreeKeyManager.\n  tabIndex) {\n    super(elementRef, tree, differs);\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static {\n    this.ɵfac = function MatNestedTreeNode_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatNestedTreeNode,\n      selectors: [[\"mat-nested-tree-node\"]],\n      hostAttrs: [1, \"mat-nested-tree-node\"],\n      inputs: {\n        node: [0, \"matNestedTreeNode\", \"node\"],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        tabIndex: [2, \"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)]\n      },\n      outputs: {\n        activation: \"activation\",\n        expandedChange: \"expandedChange\"\n      },\n      exportAs: [\"matNestedTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      outputs: ['activation', 'expandedChange'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.CdkTree\n  }, {\n    type: i0.IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? 0 : numberAttribute(value)\n      }]\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTreeNodePadding_BaseFactory;\n      return function MatTreeNodePadding_Factory(__ngFactoryType__) {\n        return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(__ngFactoryType__ || MatTreeNodePadding);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodePadding,\n      selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n      inputs: {\n        level: [2, \"matTreeNodePadding\", \"level\", numberAttribute],\n        indent: [0, \"matTreeNodePaddingIndent\", \"indent\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }],\n      standalone: true\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: [{\n        alias: 'matTreeNodePadding',\n        transform: numberAttribute\n      }]\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n  static {\n    this.ɵfac = function MatTreeNodeOutlet_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodeOutlet,\n      selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n  constructor() {\n    super(...arguments);\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n    this._nodeOutlet = undefined;\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTree_BaseFactory;\n      return function MatTree_Factory(__ngFactoryType__) {\n        return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(__ngFactoryType__ || MatTree);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatTree,\n      selectors: [[\"mat-tree\"]],\n      viewQuery: function MatTree_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-tree\"],\n      exportAs: [\"matTree\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTree,\n        useExisting: MatTree\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"matTreeNodeOutlet\", \"\"]],\n      template: function MatTree_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainer(0, 0);\n        }\n      },\n      dependencies: [MatTreeNodeOutlet],\n      styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color, var(--mat-app-surface))}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color, var(--mat-app-on-surface));font-family:var(--mat-tree-node-text-font, var(--mat-app-body-large-font));font-size:var(--mat-tree-node-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-tree-node-text-weight, var(--mat-app-body-large-weight))}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"],\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      standalone: true,\n      imports: [MatTreeNodeOutlet],\n      styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color, var(--mat-app-surface))}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color, var(--mat-app-on-surface));font-family:var(--mat-tree-node-text-font, var(--mat-app-body-large-font));font-size:var(--mat-tree-node-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-tree-node-text-weight, var(--mat-app-body-large-weight))}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTreeNodeToggle_BaseFactory;\n      return function MatTreeNodeToggle_Factory(__ngFactoryType__) {\n        return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(__ngFactoryType__ || MatTreeNodeToggle);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodeToggle,\n      selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n      inputs: {\n        recursive: [0, \"matTreeNodeToggleRecursive\", \"recursive\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }],\n      inputs: [{\n        name: 'recursive',\n        alias: 'matTreeNodeToggleRecursive'\n      }],\n      standalone: true\n    }]\n  }], null, null);\n})();\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {\n  static {\n    this.ɵfac = function MatTreeModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatTreeModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatTreeModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CdkTreeModule, MatCommonModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule, ...MAT_TREE_DIRECTIVES],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES]\n    }]\n  }], null, null);\n})();\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n *\n * @deprecated Use MatTree#childrenAccessor and MatTreeNode#isExpandable\n * instead. To be removed in a future version.\n * @breaking-change 21.0.0\n */\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor instead. To be removed in a future\n * version.\n * @breaking-change 21.0.0\n */\nclass MatTreeFlatDataSource extends DataSource {\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n  }\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","numberAttribute","booleanAttribute","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","MatCommonModule","DataSource","BehaviorSubject","merge","take","map","isNoopTreeKeyManager","keyManager","_isNoopTreeKeyManager","MatTreeNode","tabIndexInputBinding","_tabIndexInputBinding","value","_getTabindexAttribute","_tree","_keyManager","_tabindex","disabled","isDisabled","constructor","elementRef","tree","tabIndex","defaultTabIndex","Number","ngOnInit","ngOnDestroy","ɵfac","MatTreeNode_Factory","__ngFactoryType__","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatTreeNode_HostBindings","rf","ctx","ɵɵlistener","MatTreeNode_click_HostBindingHandler","_focusItem","ɵɵhostProperty","ɵɵattribute","_getAriaExpanded","level","_getPositionInSet","_getSetSize","inputs","outputs","activation","expandedChange","exportAs","standalone","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","host","undefined","decorators","transform","alias","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","name","MatNestedTreeNode","_tabIndex","differs","ngAfterContentInit","MatNestedTreeNode_Factory","IterableDiffers","node","MatTreeNodePadding","_level","_setLevelInput","indent","_indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","ViewContainerRef","MatTree","arguments","_nodeOutlet","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ɵɵStandaloneFeature","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","None","changeDetection","Default","imports","static","MatTreeNodeToggle","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_data","next","_flattenedData","_treeFlattener","_treeControl","dataNodes","initialData","_expandedData","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource"],"sources":["D:/UNIVERSIDAD/TRABAJOS free/Oscar Robayo/front-agroconecta/node_modules/@angular/material/fesm2022/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { numberAttribute, booleanAttribute, Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * Determinte if argument TreeKeyManager is the NoopTreeKeyManager. This function is safe to use with SSR.\n */\nfunction isNoopTreeKeyManager(keyManager) {\n    return !!keyManager._isNoopTreeKeyManager;\n}\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends CdkTreeNode {\n    /**\n     * The tabindex of the tree node.\n     *\n     * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n     *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n     *   an unexpected state. Tabindex to be removed in a future version.\n     * @breaking-change 21.0.0 Remove this attribute.\n     */\n    get tabIndexInputBinding() {\n        return this._tabIndexInputBinding;\n    }\n    set tabIndexInputBinding(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndexInputBinding = value;\n    }\n    _getTabindexAttribute() {\n        if (isNoopTreeKeyManager(this._tree._keyManager)) {\n            return this.tabIndexInputBinding;\n        }\n        return this._tabindex;\n    }\n    /**\n     * Whether the component is disabled.\n     *\n     * @deprecated This is an alias for `isDisabled`.\n     * @breaking-change 21.0.0 Remove this input\n     */\n    get disabled() {\n        return this.isDisabled;\n    }\n    set disabled(value) {\n        this.isDisabled = value;\n    }\n    constructor(elementRef, tree, \n    /**\n     * The tabindex of the tree node.\n     *\n     * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n     *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n     *   an unexpected state. Tabindex to be removed in a future version.\n     * @breaking-change 21.0.0 Remove this attribute.\n     */\n    tabIndex) {\n        super(elementRef, tree);\n        /**\n         * The default tabindex of the tree node.\n         *\n         * @deprecated By default MatTreeNode manages focus using TreeKeyManager instead of tabIndex.\n         *   Recommend to avoid setting tabIndex directly to prevent TreeKeyManager form getting into\n         *   an unexpected state. Tabindex to be removed in a future version.\n         * @breaking-change 21.0.0 Remove this attribute.\n         */\n        this.defaultTabIndex = 0;\n        this.tabIndexInputBinding = Number(tabIndex) || this.defaultTabIndex;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatTreeNode, isStandalone: true, selector: \"mat-tree-node\", inputs: { tabIndexInputBinding: [\"tabIndex\", \"tabIndexInputBinding\", (value) => (value == null ? 0 : numberAttribute(value))], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { activation: \"activation\", expandedChange: \"expandedChange\" }, host: { listeners: { \"click\": \"_focusItem()\" }, properties: { \"attr.aria-expanded\": \"_getAriaExpanded()\", \"attr.aria-level\": \"level + 1\", \"attr.aria-posinset\": \"_getPositionInSet()\", \"attr.aria-setsize\": \"_getSetSize()\", \"tabindex\": \"_getTabindexAttribute()\" }, classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    outputs: ['activation', 'expandedChange'],\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                        '[attr.aria-expanded]': '_getAriaExpanded()',\n                        '[attr.aria-level]': 'level + 1',\n                        '[attr.aria-posinset]': '_getPositionInSet()',\n                        '[attr.aria-setsize]': '_getSetSize()',\n                        '(click)': '_focusItem()',\n                        '[tabindex]': '_getTabindexAttribute()',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { tabIndexInputBinding: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                        alias: 'tabIndex',\n                    }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTreeNodeDef, isStandalone: true, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: [{ name: 'when', alias: 'matTreeNodeDefWhen' }],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                    standalone: true,\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * Whether the node is disabled.\n     *\n     * @deprecated This is an alias for `isDisabled`.\n     * @breaking-change 21.0.0 Remove this input\n     */\n    get disabled() {\n        return this.isDisabled;\n    }\n    set disabled(value) {\n        this.isDisabled = value;\n    }\n    /** Tabindex of the node. */\n    get tabIndex() {\n        return this.isDisabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value;\n    }\n    constructor(elementRef, tree, differs, \n    // Ignore tabindex attribute. MatTree manages its own active state using TreeKeyManager.\n    // Keeping tabIndex in constructor for backwards compatibility with trees created before\n    // introducing TreeKeyManager.\n    tabIndex) {\n        super(elementRef, tree, differs);\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatNestedTreeNode, isStandalone: true, selector: \"mat-nested-tree-node\", inputs: { node: [\"matNestedTreeNode\", \"node\"], disabled: [\"disabled\", \"disabled\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))] }, outputs: { activation: \"activation\", expandedChange: \"expandedChange\" }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n        ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    outputs: ['activation', 'expandedChange'],\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatTreeNodePadding, isStandalone: true, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\", numberAttribute], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                    standalone: true,\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: [{ alias: 'matTreeNodePadding', transform: numberAttribute }]\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTreeNodeOutlet, isStandalone: true, selector: \"[matTreeNodeOutlet]\", providers: [\n            {\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet,\n            },\n        ], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }] });\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n    constructor() {\n        super(...arguments);\n        // Outlets within the tree's template where the dataNodes will be inserted.\n        // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n        this._nodeOutlet = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTree, isStandalone: true, selector: \"mat-tree\", host: { classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color, var(--mat-app-surface))}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color, var(--mat-app-on-surface));font-family:var(--mat-tree-node-text-font, var(--mat-app-body-large-font));font-size:var(--mat-tree-node-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-tree-node-text-weight, var(--mat-app-body-large-weight))}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"], dependencies: [{ kind: \"directive\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], standalone: true, imports: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color, var(--mat-app-surface))}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color, var(--mat-app-on-surface));font-family:var(--mat-tree-node-text-font, var(--mat-app-body-large-font));font-size:var(--mat-tree-node-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-tree-node-text-weight, var(--mat-app-body-large-weight))}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTreeNodeToggle, isStandalone: true, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: [{ name: 'recursive', alias: 'matTreeNodeToggleRecursive' }],\n                    standalone: true,\n                }]\n        }] });\n\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet], exports: [MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule, ...MAT_TREE_DIRECTIVES],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                }]\n        }] });\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n *\n * @deprecated Use MatTree#childrenAccessor and MatTreeNode#isExpandable\n * instead. To be removed in a future version.\n * @breaking-change 21.0.0\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n *\n * @deprecated Use one of levelAccessor or childrenAccessor instead. To be removed in a future\n * version.\n * @breaking-change 21.0.0\n */\nclass MatTreeFlatDataSource extends DataSource {\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}