{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { forwardRef, InjectionToken, EventEmitter, booleanAttribute, Directive, Output, ContentChildren, Input, inject, NgZone, Injector, numberAttribute, afterNextRender, ANIMATION_MODULE_TYPE, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, _MatInternalFormField, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\n\n// Increasing integer for generating unique ids for radio components.\nconst _c0 = [\"input\"];\nconst _c1 = [\"formField\"];\nconst _c2 = [\"*\"];\nlet nextUniqueId = 0;\n/** Change event object emitted by radio button and radio group. */\nclass MatRadioChange {\n  constructor( /** The radio button that emits the change event. */\n  source, /** The value of the radio button. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent',\n    disabledInteractive: false\n  };\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  get labelPosition() {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  get value() {\n    return this._value;\n  }\n  set value(newValue) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  get selected() {\n    return this._selected;\n  }\n  set selected(selected) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n  /** Whether the radio group is disabled */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n    this._markRadiosForCheck();\n  }\n  /** Whether the radio group is required */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = value;\n    this._markRadiosForCheck();\n  }\n  /** Whether buttons in the group should be interactive while they're disabled. */\n  get disabledInteractive() {\n    return this._disabledInteractive;\n  }\n  set disabledInteractive(value) {\n    this._disabledInteractive = value;\n    this._markRadiosForCheck();\n  }\n  constructor(_changeDetector) {\n    this._changeDetector = _changeDetector;\n    /** Selected value for the radio group. */\n    this._value = null;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    this._name = `mat-radio-group-${nextUniqueId++}`;\n    /** The currently selected radio button. Should match value. */\n    this._selected = null;\n    /** Whether the `value` has been set to its initial value. */\n    this._isInitialized = false;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    this._labelPosition = 'after';\n    /** Whether the radio group is disabled. */\n    this._disabled = false;\n    /** Whether the radio group is required. */\n    this._required = false;\n    /** The method to be called in order to update ngModel */\n    this._controlValueAccessorChangeFn = () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    this.onTouched = () => {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    this.change = new EventEmitter();\n    this._disabledInteractive = false;\n  }\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n    // Clear the `selected` button when it's destroyed since the tabindex of the rest of the\n    // buttons depends on it. Note that we don't clear the `value`, because the radio button\n    // may be swapped out with a similar one and there are some internal apps that depend on\n    // that behavior.\n    this._buttonChanges = this._radios.changes.subscribe(() => {\n      if (this.selected && !this._radios.find(radio => radio === this.selected)) {\n        this._selected = null;\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._buttonChanges?.unsubscribe();\n  }\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n  _updateRadioButtonNames() {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n  /** Updates the `selected` radio button from the internal _value state. */\n  _updateSelectedRadioFromValue() {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent() {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected, this._value));\n    }\n  }\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n  static {\n    this.ɵfac = function MatRadioGroup_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatRadioGroup)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatRadioGroup,\n      selectors: [[\"mat-radio-group\"]],\n      contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._radios = _t);\n        }\n      },\n      hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-mdc-radio-group\"],\n      inputs: {\n        color: \"color\",\n        name: \"name\",\n        labelPosition: \"labelPosition\",\n        value: \"value\",\n        selected: \"selected\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        required: [2, \"required\", \"required\", booleanAttribute],\n        disabledInteractive: [2, \"disabledInteractive\", \"disabledInteractive\", booleanAttribute]\n      },\n      outputs: {\n        change: \"change\"\n      },\n      exportAs: [\"matRadioGroup\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n        provide: MAT_RADIO_GROUP,\n        useExisting: MatRadioGroup\n      }]), i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRadioGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-radio-group',\n      exportAs: 'matRadioGroup',\n      providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n        provide: MAT_RADIO_GROUP,\n        useExisting: MatRadioGroup\n      }],\n      host: {\n        'role': 'radiogroup',\n        'class': 'mat-mdc-radio-group'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ChangeDetectorRef\n  }], {\n    change: [{\n      type: Output\n    }],\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatRadioButton), {\n        descendants: true\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    required: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disabledInteractive: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass MatRadioButton {\n  /** Whether this radio button is checked. */\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    if (this._checked !== value) {\n      this._checked = value;\n      if (value && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!value && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n      if (value) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** The value of this radio button. */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  get labelPosition() {\n    return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  /** Whether the radio button is disabled. */\n  get disabled() {\n    return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n  }\n  set disabled(value) {\n    this._setDisabled(value);\n  }\n  /** Whether the radio button is required. */\n  get required() {\n    return this._required || this.radioGroup && this.radioGroup.required;\n  }\n  set required(value) {\n    this._required = value;\n  }\n  /**\n   * Theme color of the radio button. This API is supported in M2 themes only, it\n   * has no effect in M3 themes.\n   *\n   * For information on applying color variants in M3, see\n   * https://material.angular.io/guide/theming#using-component-color-variants.\n   */\n  get color() {\n    // As per M2 design specifications the selection control radio should use the accent color\n    // palette by default. https://m2.material.io/components/radio-buttons#specs\n    return this._color || this.radioGroup && this.radioGroup.color || this._defaultOptions && this._defaultOptions.color || 'accent';\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  /** Whether the radio button should remain interactive when it is disabled. */\n  get disabledInteractive() {\n    return this._disabledInteractive || this.radioGroup !== null && this.radioGroup.disabledInteractive;\n  }\n  set disabledInteractive(value) {\n    this._disabledInteractive = value;\n  }\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  constructor(radioGroup, _elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _defaultOptions, tabIndex) {\n    this._elementRef = _elementRef;\n    this._changeDetector = _changeDetector;\n    this._focusMonitor = _focusMonitor;\n    this._radioDispatcher = _radioDispatcher;\n    this._defaultOptions = _defaultOptions;\n    this._ngZone = inject(NgZone);\n    this._uniqueId = `mat-radio-${++nextUniqueId}`;\n    /** The unique ID for the radio button. */\n    this.id = this._uniqueId;\n    /** Whether ripples are disabled inside the radio button */\n    this.disableRipple = false;\n    /** Tabindex of the radio button. */\n    this.tabIndex = 0;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    this.change = new EventEmitter();\n    /** Whether this radio is checked. */\n    this._checked = false;\n    /** Value assigned to this radio. */\n    this._value = null;\n    /** Unregister function for _radioDispatcher */\n    this._removeUniqueSelectionListener = () => {};\n    this._injector = inject(Injector);\n    /** Called when the input is clicked. */\n    this._onInputClick = event => {\n      // If the input is disabled while interactive, we need to prevent the\n      // selection from happening in this event handler. Note that even though\n      // this happens on `click` events, the logic applies when the user is\n      // navigating with the keyboard as well. An alternative way of doing\n      // this is by resetting the `checked` state in the `change` callback but\n      // it isn't optimal, because it can allow a pre-checked disabled button\n      // to be un-checked. This approach seems to cover everything.\n      if (this.disabled && this.disabledInteractive) {\n        event.preventDefault();\n      }\n    };\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n    this._noopAnimations = animationMode === 'NoopAnimations';\n    this._disabledInteractive = _defaultOptions?.disabledInteractive ?? false;\n    if (tabIndex) {\n      this.tabIndex = numberAttribute(tabIndex, 0);\n    }\n  }\n  /** Focuses the radio button. */\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      }\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n    this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n  ngDoCheck() {\n    this._updateTabIndex();\n  }\n  ngAfterViewInit() {\n    this._updateTabIndex();\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n    // We bind this outside of the zone, because:\n    // 1. Its logic is completely DOM-related so we can avoid some change detections.\n    // 2. There appear to be some internal tests that break when this triggers a change detection.\n    this._ngZone.runOutsideAngular(() => {\n      this._inputElement.nativeElement.addEventListener('click', this._onInputClick);\n    });\n  }\n  ngOnDestroy() {\n    // We need to null check in case the button was destroyed before `ngAfterViewInit`.\n    this._inputElement?.nativeElement.removeEventListener('click', this._onInputClick);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n  /** Dispatch change event with current value. */\n  _emitChangeEvent() {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /** Triggered when the radio button receives an interaction from the user. */\n  _onInputInteraction(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n    if (!this.checked && !this.disabled) {\n      const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n      this._emitChangeEvent();\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n        if (groupValueChanged) {\n          this.radioGroup._emitChangeEvent();\n        }\n      }\n    }\n  }\n  /** Triggered when the user clicks on the touch target. */\n  _onTouchTargetClick(event) {\n    this._onInputInteraction(event);\n    if (!this.disabled || this.disabledInteractive) {\n      // Normally the input should be focused already, but if the click\n      // comes from the touch target, then we might have to focus it ourselves.\n      this._inputElement?.nativeElement.focus();\n    }\n  }\n  /** Sets the disabled state and marks for check if a change occurred. */\n  _setDisabled(value) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** Gets the tabindex for the underlying input element. */\n  _updateTabIndex() {\n    const group = this.radioGroup;\n    let value;\n    // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n    // necessary, because the browser handles the tab order for inputs inside a group automatically,\n    // but we need an explicitly higher tabindex for the selected button in order for things like\n    // the focus trap to pick it up correctly.\n    if (!group || !group.selected || this.disabled) {\n      value = this.tabIndex;\n    } else {\n      value = group.selected === this ? this.tabIndex : -1;\n    }\n    if (value !== this._previousTabIndex) {\n      // We have to set the tabindex directly on the DOM node, because it depends on\n      // the selected state which is prone to \"changed after checked errors\".\n      const input = this._inputElement?.nativeElement;\n      if (input) {\n        input.setAttribute('tabindex', value + '');\n        this._previousTabIndex = value;\n        // Wait for any pending tabindex changes to be applied\n        afterNextRender(() => {\n          queueMicrotask(() => {\n            // The radio group uses a \"selection follows focus\" pattern for tab management, so if this\n            // radio button is currently focused and another radio button in the group becomes\n            // selected, we should move focus to the newly selected radio button to maintain\n            // consistency between the focused and selected states.\n            if (group && group.selected && group.selected !== this && document.activeElement === input) {\n              group.selected?._inputElement.nativeElement.focus();\n              // If this radio button still has focus, the selected one must be disabled. In this\n              // case the radio group as a whole should lose focus.\n              if (document.activeElement === input) {\n                this._inputElement.nativeElement.blur();\n              }\n            }\n          });\n        }, {\n          injector: this._injector\n        });\n      }\n    }\n  }\n  static {\n    this.ɵfac = function MatRadioButton_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatRadioButton)(i0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i2.UniqueSelectionDispatcher), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), i0.ɵɵinjectAttribute('tabindex'));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatRadioButton,\n      selectors: [[\"mat-radio-button\"]],\n      viewQuery: function MatRadioButton_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 7, ElementRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._rippleTrigger = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-radio-button\"],\n      hostVars: 19,\n      hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n            return ctx._inputElement.nativeElement.focus();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", null)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n          i0.ɵɵclassProp(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\")(\"mat-mdc-radio-checked\", ctx.checked)(\"mat-mdc-radio-disabled\", ctx.disabled)(\"mat-mdc-radio-disabled-interactive\", ctx.disabledInteractive)(\"_mat-animation-noopable\", ctx._noopAnimations);\n        }\n      },\n      inputs: {\n        id: \"id\",\n        name: \"name\",\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n        ariaDescribedby: [0, \"aria-describedby\", \"ariaDescribedby\"],\n        disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n        tabIndex: [2, \"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)],\n        checked: [2, \"checked\", \"checked\", booleanAttribute],\n        value: \"value\",\n        labelPosition: \"labelPosition\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        required: [2, \"required\", \"required\", booleanAttribute],\n        color: \"color\",\n        disabledInteractive: [2, \"disabledInteractive\", \"disabledInteractive\", booleanAttribute]\n      },\n      outputs: {\n        change: \"change\"\n      },\n      exportAs: [\"matRadioButton\"],\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature, i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c2,\n      decls: 13,\n      vars: 17,\n      consts: [[\"formField\", \"\"], [\"input\", \"\"], [\"mat-internal-form-field\", \"\", 3, \"labelPosition\"], [1, \"mdc-radio\"], [1, \"mat-mdc-radio-touch-target\", 3, \"click\"], [\"type\", \"radio\", 1, \"mdc-radio__native-control\", 3, \"change\", \"id\", \"checked\", \"disabled\", \"required\"], [1, \"mdc-radio__background\"], [1, \"mdc-radio__outer-circle\"], [1, \"mdc-radio__inner-circle\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-mdc-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mdc-label\", 3, \"for\"]],\n      template: function MatRadioButton_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 2, 0)(2, \"div\", 3)(3, \"div\", 4);\n          i0.ɵɵlistener(\"click\", function MatRadioButton_Template_div_click_3_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx._onTouchTargetClick($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"input\", 5, 1);\n          i0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_4_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx._onInputInteraction($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 6);\n          i0.ɵɵelement(7, \"div\", 7)(8, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 9);\n          i0.ɵɵelement(10, \"div\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"label\", 11);\n          i0.ɵɵprojection(12);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"labelPosition\", ctx.labelPosition);\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"mdc-radio--disabled\", ctx.disabled);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled && !ctx.disabledInteractive)(\"required\", ctx.required);\n          i0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby)(\"aria-disabled\", ctx.disabled && ctx.disabledInteractive ? \"true\" : null);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"matRippleTrigger\", ctx._rippleTrigger.nativeElement)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"for\", ctx.inputId);\n        }\n      },\n      dependencies: [MatRipple, _MatInternalFormField],\n      styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled])~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size);top:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-app-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-app-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-app-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-app-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-app-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color)}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple .mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio .mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'mat-radio-button',\n      host: {\n        'class': 'mat-mdc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mat-primary]': 'color === \"primary\"',\n        '[class.mat-accent]': 'color === \"accent\"',\n        '[class.mat-warn]': 'color === \"warn\"',\n        '[class.mat-mdc-radio-checked]': 'checked',\n        '[class.mat-mdc-radio-disabled]': 'disabled',\n        '[class.mat-mdc-radio-disabled-interactive]': 'disabledInteractive',\n        '[class._mat-animation-noopable]': '_noopAnimations',\n        // Needs to be removed since it causes some a11y issues (see #21266).\n        '[attr.tabindex]': 'null',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null',\n        // Note: under normal conditions focus shouldn't land on this element, however it may be\n        // programmatically set, for example inside of a focus trap, in this case we want to forward\n        // the focus to the native element.\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      exportAs: 'matRadioButton',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      imports: [MatRipple, _MatInternalFormField],\n      template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-mdc-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\",\n      styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled])~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size);top:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-app-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-app-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-app-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-app-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-app-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color)}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple .mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio .mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"]\n    }]\n  }], () => [{\n    type: MatRadioGroup,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RADIO_GROUP]\n    }]\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i1.FocusMonitor\n  }, {\n    type: i2.UniqueSelectionDispatcher\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RADIO_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    disableRipple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? 0 : numberAttribute(value)\n      }]\n    }],\n    checked: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    required: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    disabledInteractive: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    change: [{\n      type: Output\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    _rippleTrigger: [{\n      type: ViewChild,\n      args: ['formField', {\n        read: ElementRef,\n        static: true\n      }]\n    }]\n  });\n})();\nclass MatRadioModule {\n  static {\n    this.ɵfac = function MatRadioModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatRadioModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatRadioModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioButton, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioGroup, MatRadioButton],\n      exports: [MatCommonModule, MatRadioGroup, MatRadioButton]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };","map":{"version":3,"names":["i1","i2","i0","forwardRef","InjectionToken","EventEmitter","booleanAttribute","Directive","Output","ContentChildren","Input","inject","NgZone","Injector","numberAttribute","afterNextRender","ANIMATION_MODULE_TYPE","ElementRef","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","MatRipple","_MatInternalFormField","MatCommonModule","MatRippleModule","CommonModule","_c0","_c1","_c2","nextUniqueId","MatRadioChange","constructor","source","value","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MAT_RADIO_GROUP","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","disabledInteractive","name","_name","_updateRadioButtonNames","labelPosition","_labelPosition","v","_markRadiosForCheck","_value","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_selected","checked","selected","disabled","_disabled","required","_required","_disabledInteractive","_changeDetector","_isInitialized","_controlValueAccessorChangeFn","onTouched","change","ngAfterContentInit","_buttonChanges","_radios","changes","subscribe","find","radio","ngOnDestroy","unsubscribe","_touch","forEach","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","MatRadioGroup_Factory","__ngFactoryType__","ɵɵdirectiveInject","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatRadioGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatRadioButton","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","inputs","outputs","exportAs","standalone","features","ɵɵProvidersFeature","ɵɵInputTransformsFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","host","descendants","transform","_checked","radioGroup","_radioDispatcher","notify","id","_setDisabled","_color","_defaultOptions","inputId","_uniqueId","_elementRef","_focusMonitor","animationMode","tabIndex","_ngZone","disableRipple","_removeUniqueSelectionListener","_injector","_onInputClick","event","preventDefault","_noopAnimations","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","listen","ngDoCheck","_updateTabIndex","ngAfterViewInit","monitor","focusOrigin","runOutsideAngular","addEventListener","removeEventListener","stopMonitoring","_isRippleDisabled","_onInputInteraction","stopPropagation","groupValueChanged","_onTouchTargetClick","group","_previousTabIndex","input","setAttribute","queueMicrotask","document","activeElement","blur","injector","MatRadioButton_Factory","FocusMonitor","UniqueSelectionDispatcher","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatRadioButton_Query","ɵɵviewQuery","first","_rippleTrigger","hostVars","hostBindings","MatRadioButton_HostBindings","ɵɵlistener","MatRadioButton_focus_HostBindingHandler","ɵɵattribute","ɵɵclassProp","ariaLabel","ariaLabelledby","ariaDescribedby","ɵɵStandaloneFeature","ngContentSelectors","decls","vars","consts","template","MatRadioButton_Template","_r1","ɵɵgetCurrentView","ɵɵprojectionDef","ɵɵelementStart","MatRadioButton_Template_div_click_3_listener","$event","ɵɵrestoreView","ɵɵresetView","ɵɵelementEnd","MatRadioButton_Template_input_change_4_listener","ɵɵelement","ɵɵprojection","ɵɵproperty","ɵɵadvance","dependencies","styles","encapsulation","changeDetection","None","OnPush","imports","decorators","undefined","read","static","MatRadioModule","MatRadioModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports"],"sources":["D:/UNIVERSIDAD/TRABAJOS free/master/material-pro-angular-lite-master/package/node_modules/@angular/material/fesm2022/radio.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { forwardRef, InjectionToken, EventEmitter, booleanAttribute, Directive, Output, ContentChildren, Input, inject, NgZone, Injector, numberAttribute, afterNextRender, ANIMATION_MODULE_TYPE, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, _MatInternalFormField, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/** Change event object emitted by radio button and radio group. */\nclass MatRadioChange {\n    constructor(\n    /** The radio button that emits the change event. */\n    source, \n    /** The value of the radio button. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true,\n};\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        disabledInteractive: false,\n    };\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether buttons in the group should be interactive while they're disabled. */\n    get disabledInteractive() {\n        return this._disabledInteractive;\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n        this._markRadiosForCheck();\n    }\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        this._disabledInteractive = false;\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n        // Clear the `selected` button when it's destroyed since the tabindex of the rest of the\n        // buttons depends on it. Note that we don't clear the `value`, because the radio button\n        // may be swapped out with a similar one and there are some internal apps that depend on\n        // that behavior.\n        this._buttonChanges = this._radios.changes.subscribe(() => {\n            if (this.selected && !this._radios.find(radio => radio === this.selected)) {\n                this._selected = null;\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._buttonChanges?.unsubscribe();\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioGroup, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatRadioGroup, isStandalone: true, selector: \"mat-radio-group\", inputs: { color: \"color\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"radiogroup\" }, classAttribute: \"mat-mdc-radio-group\" }, providers: [\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ], queries: [{ propertyName: \"_radios\", predicate: i0.forwardRef(() => MatRadioButton), descendants: true }], exportAs: [\"matRadioGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [\n                        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                    ],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-mdc-radio-group',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { change: [{\n                type: Output\n            }], _radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatRadioButton), { descendants: true }]\n            }], color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\nclass MatRadioButton {\n    /** Whether this radio button is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (this._checked !== value) {\n            this._checked = value;\n            if (value && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!value && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (value) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(value);\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = value;\n    }\n    /**\n     * Theme color of the radio button. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        // As per M2 design specifications the selection control radio should use the accent color\n        // palette by default. https://m2.material.io/components/radio-buttons#specs\n        return (this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            (this._defaultOptions && this._defaultOptions.color) ||\n            'accent');\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    /** Whether the radio button should remain interactive when it is disabled. */\n    get disabledInteractive() {\n        return (this._disabledInteractive || (this.radioGroup !== null && this.radioGroup.disabledInteractive));\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n    }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    constructor(radioGroup, _elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _defaultOptions, tabIndex) {\n        this._elementRef = _elementRef;\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._defaultOptions = _defaultOptions;\n        this._ngZone = inject(NgZone);\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /** Whether ripples are disabled inside the radio button */\n        this.disableRipple = false;\n        /** Tabindex of the radio button. */\n        this.tabIndex = 0;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        this._injector = inject(Injector);\n        /** Called when the input is clicked. */\n        this._onInputClick = (event) => {\n            // If the input is disabled while interactive, we need to prevent the\n            // selection from happening in this event handler. Note that even though\n            // this happens on `click` events, the logic applies when the user is\n            // navigating with the keyboard as well. An alternative way of doing\n            // this is by resetting the `checked` state in the `change` callback but\n            // it isn't optimal, because it can allow a pre-checked disabled button\n            // to be un-checked. This approach seems to cover everything.\n            if (this.disabled && this.disabledInteractive) {\n                event.preventDefault();\n            }\n        };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this._disabledInteractive = _defaultOptions?.disabledInteractive ?? false;\n        if (tabIndex) {\n            this.tabIndex = numberAttribute(tabIndex, 0);\n        }\n    }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n        this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\n            if (id !== this.id && name === this.name) {\n                this.checked = false;\n            }\n        });\n    }\n    ngDoCheck() {\n        this._updateTabIndex();\n    }\n    ngAfterViewInit() {\n        this._updateTabIndex();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n        // We bind this outside of the zone, because:\n        // 1. Its logic is completely DOM-related so we can avoid some change detections.\n        // 2. There appear to be some internal tests that break when this triggers a change detection.\n        this._ngZone.runOutsideAngular(() => {\n            this._inputElement.nativeElement.addEventListener('click', this._onInputClick);\n        });\n    }\n    ngOnDestroy() {\n        // We need to null check in case the button was destroyed before `ngAfterViewInit`.\n        this._inputElement?.nativeElement.removeEventListener('click', this._onInputClick);\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Triggered when the user clicks on the touch target. */\n    _onTouchTargetClick(event) {\n        this._onInputInteraction(event);\n        if (!this.disabled || this.disabledInteractive) {\n            // Normally the input should be focused already, but if the click\n            // comes from the touch target, then we might have to focus it ourselves.\n            this._inputElement?.nativeElement.focus();\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** Gets the tabindex for the underlying input element. */\n    _updateTabIndex() {\n        const group = this.radioGroup;\n        let value;\n        // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n        // necessary, because the browser handles the tab order for inputs inside a group automatically,\n        // but we need an explicitly higher tabindex for the selected button in order for things like\n        // the focus trap to pick it up correctly.\n        if (!group || !group.selected || this.disabled) {\n            value = this.tabIndex;\n        }\n        else {\n            value = group.selected === this ? this.tabIndex : -1;\n        }\n        if (value !== this._previousTabIndex) {\n            // We have to set the tabindex directly on the DOM node, because it depends on\n            // the selected state which is prone to \"changed after checked errors\".\n            const input = this._inputElement?.nativeElement;\n            if (input) {\n                input.setAttribute('tabindex', value + '');\n                this._previousTabIndex = value;\n                // Wait for any pending tabindex changes to be applied\n                afterNextRender(() => {\n                    queueMicrotask(() => {\n                        // The radio group uses a \"selection follows focus\" pattern for tab management, so if this\n                        // radio button is currently focused and another radio button in the group becomes\n                        // selected, we should move focus to the newly selected radio button to maintain\n                        // consistency between the focused and selected states.\n                        if (group &&\n                            group.selected &&\n                            group.selected !== this &&\n                            document.activeElement === input) {\n                            group.selected?._inputElement.nativeElement.focus();\n                            // If this radio button still has focus, the selected one must be disabled. In this\n                            // case the radio group as a whole should lose focus.\n                            if (document.activeElement === input) {\n                                this._inputElement.nativeElement.blur();\n                            }\n                        }\n                    });\n                }, { injector: this._injector });\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioButton, deps: [{ token: MAT_RADIO_GROUP, optional: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i2.UniqueSelectionDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_RADIO_DEFAULT_OPTIONS, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatRadioButton, isStandalone: true, selector: \"mat-radio-button\", inputs: { id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], checked: [\"checked\", \"checked\", booleanAttribute], value: \"value\", labelPosition: \"labelPosition\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], color: \"color\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { listeners: { \"focus\": \"_inputElement.nativeElement.focus()\" }, properties: { \"attr.id\": \"id\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"class.mat-mdc-radio-checked\": \"checked\", \"class.mat-mdc-radio-disabled\": \"disabled\", \"class.mat-mdc-radio-disabled-interactive\": \"disabledInteractive\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" }, classAttribute: \"mat-mdc-radio-button\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"_rippleTrigger\", first: true, predicate: [\"formField\"], descendants: true, read: ElementRef, static: true }], exportAs: [\"matRadioButton\"], ngImport: i0, template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-mdc-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled])~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size);top:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-app-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-app-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-app-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-app-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-app-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color)}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple .mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio .mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"], dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"component\", type: _MatInternalFormField, selector: \"div[mat-internal-form-field]\", inputs: [\"labelPosition\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioButton, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-radio-button', host: {\n                        'class': 'mat-mdc-radio-button',\n                        '[attr.id]': 'id',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        '[class.mat-mdc-radio-checked]': 'checked',\n                        '[class.mat-mdc-radio-disabled]': 'disabled',\n                        '[class.mat-mdc-radio-disabled-interactive]': 'disabledInteractive',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    }, exportAs: 'matRadioButton', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [MatRipple, _MatInternalFormField], template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-mdc-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled])~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size);top:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-app-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-app-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-app-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-app-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-app-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color)}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple .mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio .mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.cdk-focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"] }]\n        }], ctorParameters: () => [{ type: MatRadioGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RADIO_GROUP]\n                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.UniqueSelectionDispatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RADIO_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], checked: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], value: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], color: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], change: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], _rippleTrigger: [{\n                type: ViewChild,\n                args: ['formField', { read: ElementRef, static: true }]\n            }] } });\n\nclass MatRadioModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioGroup, MatRadioButton], exports: [MatCommonModule, MatRadioGroup, MatRadioButton] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioButton, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioGroup, MatRadioButton],\n                    exports: [MatCommonModule, MatRadioGroup, MatRadioButton],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,mBAAmB;AACvC,OAAO,KAAKC,EAAE,MAAM,0BAA0B;AAC9C,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,cAAc,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,MAAM,EAAEC,eAAe,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,eAAe,EAAEC,qBAAqB,EAAEC,UAAU,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAC7U,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,SAAS,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAC3G,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AAAA,MAAAC,GAAA;AACA,IAAIC,YAAY,GAAG,CAAC;AACpB;AACA,MAAMC,cAAc,CAAC;EACjBC,WAAWA,CAAA,CACX;EACAC,MAAM,EACN;EACAC,KAAK,EAAE;IACH,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sCAAsC,GAAG;EAC3CC,OAAO,EAAEf,iBAAiB;EAC1BgB,WAAW,EAAEvC,UAAU,CAAC,MAAMwC,aAAa,CAAC;EAC5CC,KAAK,EAAE;AACX,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAIzC,cAAc,CAAC,eAAe,CAAC;AAC3D,MAAM0C,yBAAyB,GAAG,IAAI1C,cAAc,CAAC,2BAA2B,EAAE;EAC9E2C,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEC;AACb,CAAC,CAAC;AACF,SAASA,iCAAiCA,CAAA,EAAG;EACzC,OAAO;IACHC,KAAK,EAAE,QAAQ;IACfC,mBAAmB,EAAE;EACzB,CAAC;AACL;AACA;AACA;AACA;AACA,MAAMR,aAAa,CAAC;EAChB;EACA,IAAIS,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,KAAK;EACrB;EACA,IAAID,IAAIA,CAACb,KAAK,EAAE;IACZ,IAAI,CAACc,KAAK,GAAGd,KAAK;IAClB,IAAI,CAACe,uBAAuB,CAAC,CAAC;EAClC;EACA;EACA,IAAIC,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,cAAc;EAC9B;EACA,IAAID,aAAaA,CAACE,CAAC,EAAE;IACjB,IAAI,CAACD,cAAc,GAAGC,CAAC,KAAK,QAAQ,GAAG,QAAQ,GAAG,OAAO;IACzD,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAInB,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACoB,MAAM;EACtB;EACA,IAAIpB,KAAKA,CAACqB,QAAQ,EAAE;IAChB,IAAI,IAAI,CAACD,MAAM,KAAKC,QAAQ,EAAE;MAC1B;MACA,IAAI,CAACD,MAAM,GAAGC,QAAQ;MACtB,IAAI,CAACC,6BAA6B,CAAC,CAAC;MACpC,IAAI,CAACC,yBAAyB,CAAC,CAAC;IACpC;EACJ;EACAA,yBAAyBA,CAAA,EAAG;IACxB,IAAI,IAAI,CAACC,SAAS,IAAI,CAAC,IAAI,CAACA,SAAS,CAACC,OAAO,EAAE;MAC3C,IAAI,CAACD,SAAS,CAACC,OAAO,GAAG,IAAI;IACjC;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACF,SAAS;EACzB;EACA,IAAIE,QAAQA,CAACA,QAAQ,EAAE;IACnB,IAAI,CAACF,SAAS,GAAGE,QAAQ;IACzB,IAAI,CAAC1B,KAAK,GAAG0B,QAAQ,GAAGA,QAAQ,CAAC1B,KAAK,GAAG,IAAI;IAC7C,IAAI,CAACuB,yBAAyB,CAAC,CAAC;EACpC;EACA;EACA,IAAII,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,SAAS;EACzB;EACA,IAAID,QAAQA,CAAC3B,KAAK,EAAE;IAChB,IAAI,CAAC4B,SAAS,GAAG5B,KAAK;IACtB,IAAI,CAACmB,mBAAmB,CAAC,CAAC;EAC9B;EACA;EACA,IAAIU,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,SAAS;EACzB;EACA,IAAID,QAAQA,CAAC7B,KAAK,EAAE;IAChB,IAAI,CAAC8B,SAAS,GAAG9B,KAAK;IACtB,IAAI,CAACmB,mBAAmB,CAAC,CAAC;EAC9B;EACA;EACA,IAAIP,mBAAmBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACmB,oBAAoB;EACpC;EACA,IAAInB,mBAAmBA,CAACZ,KAAK,EAAE;IAC3B,IAAI,CAAC+B,oBAAoB,GAAG/B,KAAK;IACjC,IAAI,CAACmB,mBAAmB,CAAC,CAAC;EAC9B;EACArB,WAAWA,CAACkC,eAAe,EAAE;IACzB,IAAI,CAACA,eAAe,GAAGA,eAAe;IACtC;IACA,IAAI,CAACZ,MAAM,GAAG,IAAI;IAClB;IACA,IAAI,CAACN,KAAK,GAAG,mBAAmBlB,YAAY,EAAE,EAAE;IAChD;IACA,IAAI,CAAC4B,SAAS,GAAG,IAAI;IACrB;IACA,IAAI,CAACS,cAAc,GAAG,KAAK;IAC3B;IACA,IAAI,CAAChB,cAAc,GAAG,OAAO;IAC7B;IACA,IAAI,CAACW,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACE,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACI,6BAA6B,GAAG,MAAM,CAAE,CAAC;IAC9C;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,MAAM,CAAE,CAAC;IAC1B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAItE,YAAY,CAAC,CAAC;IAChC,IAAI,CAACiE,oBAAoB,GAAG,KAAK;EACrC;EACA;AACJ;AACA;AACA;EACIM,kBAAkBA,CAAA,EAAG;IACjB;IACA;IACA;IACA,IAAI,CAACJ,cAAc,GAAG,IAAI;IAC1B;IACA;IACA;IACA;IACA,IAAI,CAACK,cAAc,GAAG,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,SAAS,CAAC,MAAM;MACvD,IAAI,IAAI,CAACf,QAAQ,IAAI,CAAC,IAAI,CAACa,OAAO,CAACG,IAAI,CAACC,KAAK,IAAIA,KAAK,KAAK,IAAI,CAACjB,QAAQ,CAAC,EAAE;QACvE,IAAI,CAACF,SAAS,GAAG,IAAI;MACzB;IACJ,CAAC,CAAC;EACN;EACAoB,WAAWA,CAAA,EAAG;IACV,IAAI,CAACN,cAAc,EAAEO,WAAW,CAAC,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACX,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAAC,CAAC;IACpB;EACJ;EACApB,uBAAuBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAACwB,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACQ,OAAO,CAACJ,KAAK,IAAI;QAC1BA,KAAK,CAAC9B,IAAI,GAAG,IAAI,CAACA,IAAI;QACtB8B,KAAK,CAACK,aAAa,CAAC,CAAC;MACzB,CAAC,CAAC;IACN;EACJ;EACA;EACA1B,6BAA6BA,CAAA,EAAG;IAC5B;IACA,MAAM2B,iBAAiB,GAAG,IAAI,CAACzB,SAAS,KAAK,IAAI,IAAI,IAAI,CAACA,SAAS,CAACxB,KAAK,KAAK,IAAI,CAACoB,MAAM;IACzF,IAAI,IAAI,CAACmB,OAAO,IAAI,CAACU,iBAAiB,EAAE;MACpC,IAAI,CAACzB,SAAS,GAAG,IAAI;MACrB,IAAI,CAACe,OAAO,CAACQ,OAAO,CAACJ,KAAK,IAAI;QAC1BA,KAAK,CAAClB,OAAO,GAAG,IAAI,CAACzB,KAAK,KAAK2C,KAAK,CAAC3C,KAAK;QAC1C,IAAI2C,KAAK,CAAClB,OAAO,EAAE;UACf,IAAI,CAACD,SAAS,GAAGmB,KAAK;QAC1B;MACJ,CAAC,CAAC;IACN;EACJ;EACA;EACAO,gBAAgBA,CAAA,EAAG;IACf,IAAI,IAAI,CAACjB,cAAc,EAAE;MACrB,IAAI,CAACG,MAAM,CAACe,IAAI,CAAC,IAAItD,cAAc,CAAC,IAAI,CAAC2B,SAAS,EAAE,IAAI,CAACJ,MAAM,CAAC,CAAC;IACrE;EACJ;EACAD,mBAAmBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACoB,OAAO,EAAE;MACd,IAAI,CAACA,OAAO,CAACQ,OAAO,CAACJ,KAAK,IAAIA,KAAK,CAACK,aAAa,CAAC,CAAC,CAAC;IACxD;EACJ;EACA;AACJ;AACA;AACA;EACII,UAAUA,CAACpD,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACgC,eAAe,CAACqB,YAAY,CAAC,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;EACIC,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAACrB,6BAA6B,GAAGqB,EAAE;EAC3C;EACA;AACJ;AACA;AACA;AACA;EACIC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAACpB,SAAS,GAAGoB,EAAE;EACvB;EACA;AACJ;AACA;AACA;EACIE,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAAC/B,QAAQ,GAAG+B,UAAU;IAC1B,IAAI,CAAC1B,eAAe,CAACqB,YAAY,CAAC,CAAC;EACvC;EACA;IAAS,IAAI,CAACM,IAAI,YAAAC,sBAAAC,iBAAA;MAAA,YAAAA,iBAAA,IAA+FzD,aAAa,EAAvBzC,EAAE,CAAAmG,iBAAA,CAAuCnG,EAAE,CAACoG,iBAAiB;IAAA,CAA4C;EAAE;EAClN;IAAS,IAAI,CAACC,IAAI,kBADqFrG,EAAE,CAAAsG,iBAAA;MAAAC,IAAA,EACJ9D,aAAa;MAAA+D,SAAA;MAAAC,cAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA,EAAAC,QAAA;QAAA,IAAAF,EAAA;UADX3G,EAAE,CAAA8G,cAAA,CAAAD,QAAA,EAI9BE,cAAc;QAAA;QAAA,IAAAJ,EAAA;UAAA,IAAAK,EAAA;UAJchH,EAAE,CAAAiH,cAAA,CAAAD,EAAA,GAAFhH,EAAE,CAAAkH,WAAA,QAAAN,GAAA,CAAAhC,OAAA,GAAAoC,EAAA;QAAA;MAAA;MAAAG,SAAA,WAC4a,YAAY;MAAAC,MAAA;QAAApE,KAAA;QAAAE,IAAA;QAAAG,aAAA;QAAAhB,KAAA;QAAA0B,QAAA;QAAAC,QAAA,8BAA3O5D,gBAAgB;QAAA8D,QAAA,8BAAsC9D,gBAAgB;QAAA6C,mBAAA,oDAAuE7C,gBAAgB;MAAA;MAAAiH,OAAA;QAAA5C,MAAA;MAAA;MAAA6C,QAAA;MAAAC,UAAA;MAAAC,QAAA,GAD5WxH,EAAE,CAAAyH,kBAAA,CACgf,CACjlBnF,sCAAsC,EACtC;QAAEC,OAAO,EAAEI,eAAe;QAAEH,WAAW,EAAEC;MAAc,CAAC,CAC3D,GAJkGzC,EAAE,CAAA0H,wBAAA;IAAA,EAIqD;EAAE;AACpK;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAN2G3H,EAAE,CAAA4H,iBAAA,CAMXnF,aAAa,EAAc,CAAC;IAClH8D,IAAI,EAAElG,SAAS;IACfwH,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,iBAAiB;MAC3BR,QAAQ,EAAE,eAAe;MACzBS,SAAS,EAAE,CACPzF,sCAAsC,EACtC;QAAEC,OAAO,EAAEI,eAAe;QAAEH,WAAW,EAAEC;MAAc,CAAC,CAC3D;MACDuF,IAAI,EAAE;QACF,MAAM,EAAE,YAAY;QACpB,OAAO,EAAE;MACb,CAAC;MACDT,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEhB,IAAI,EAAEvG,EAAE,CAACoG;EAAkB,CAAC,CAAC,EAAkB;IAAE3B,MAAM,EAAE,CAAC;MAC/E8B,IAAI,EAAEjG;IACV,CAAC,CAAC;IAAEsE,OAAO,EAAE,CAAC;MACV2B,IAAI,EAAEhG,eAAe;MACrBsH,IAAI,EAAE,CAAC5H,UAAU,CAAC,MAAM8G,cAAc,CAAC,EAAE;QAAEkB,WAAW,EAAE;MAAK,CAAC;IAClE,CAAC,CAAC;IAAEjF,KAAK,EAAE,CAAC;MACRuD,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAE0C,IAAI,EAAE,CAAC;MACPqD,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAE6C,aAAa,EAAE,CAAC;MAChBkD,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAE6B,KAAK,EAAE,CAAC;MACRkE,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAEuD,QAAQ,EAAE,CAAC;MACXwC,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAEwD,QAAQ,EAAE,CAAC;MACXuC,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAE8D,QAAQ,EAAE,CAAC;MACXqC,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAE6C,mBAAmB,EAAE,CAAC;MACtBsD,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC;EAAE,CAAC;AAAA;AAChB,MAAM2G,cAAc,CAAC;EACjB;EACA,IAAIjD,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACqE,QAAQ;EACxB;EACA,IAAIrE,OAAOA,CAACzB,KAAK,EAAE;IACf,IAAI,IAAI,CAAC8F,QAAQ,KAAK9F,KAAK,EAAE;MACzB,IAAI,CAAC8F,QAAQ,GAAG9F,KAAK;MACrB,IAAIA,KAAK,IAAI,IAAI,CAAC+F,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC/F,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;QAClE,IAAI,CAAC+F,UAAU,CAACrE,QAAQ,GAAG,IAAI;MACnC,CAAC,MACI,IAAI,CAAC1B,KAAK,IAAI,IAAI,CAAC+F,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC/F,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;QACxE;QACA;QACA,IAAI,CAAC+F,UAAU,CAACrE,QAAQ,GAAG,IAAI;MACnC;MACA,IAAI1B,KAAK,EAAE;QACP;QACA,IAAI,CAACgG,gBAAgB,CAACC,MAAM,CAAC,IAAI,CAACC,EAAE,EAAE,IAAI,CAACrF,IAAI,CAAC;MACpD;MACA,IAAI,CAACmB,eAAe,CAACqB,YAAY,CAAC,CAAC;IACvC;EACJ;EACA;EACA,IAAIrD,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACoB,MAAM;EACtB;EACA,IAAIpB,KAAKA,CAACA,KAAK,EAAE;IACb,IAAI,IAAI,CAACoB,MAAM,KAAKpB,KAAK,EAAE;MACvB,IAAI,CAACoB,MAAM,GAAGpB,KAAK;MACnB,IAAI,IAAI,CAAC+F,UAAU,KAAK,IAAI,EAAE;QAC1B,IAAI,CAAC,IAAI,CAACtE,OAAO,EAAE;UACf;UACA,IAAI,CAACA,OAAO,GAAG,IAAI,CAACsE,UAAU,CAAC/F,KAAK,KAAKA,KAAK;QAClD;QACA,IAAI,IAAI,CAACyB,OAAO,EAAE;UACd,IAAI,CAACsE,UAAU,CAACrE,QAAQ,GAAG,IAAI;QACnC;MACJ;IACJ;EACJ;EACA;EACA,IAAIV,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,cAAc,IAAK,IAAI,CAAC8E,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC/E,aAAc,IAAI,OAAO;EAC/F;EACA,IAAIA,aAAaA,CAAChB,KAAK,EAAE;IACrB,IAAI,CAACiB,cAAc,GAAGjB,KAAK;EAC/B;EACA;EACA,IAAI2B,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,SAAS,IAAK,IAAI,CAACmE,UAAU,KAAK,IAAI,IAAI,IAAI,CAACA,UAAU,CAACpE,QAAS;EACnF;EACA,IAAIA,QAAQA,CAAC3B,KAAK,EAAE;IAChB,IAAI,CAACmG,YAAY,CAACnG,KAAK,CAAC;EAC5B;EACA;EACA,IAAI6B,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,SAAS,IAAK,IAAI,CAACiE,UAAU,IAAI,IAAI,CAACA,UAAU,CAAClE,QAAS;EAC1E;EACA,IAAIA,QAAQA,CAAC7B,KAAK,EAAE;IAChB,IAAI,CAAC8B,SAAS,GAAG9B,KAAK;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIW,KAAKA,CAAA,EAAG;IACR;IACA;IACA,OAAQ,IAAI,CAACyF,MAAM,IACd,IAAI,CAACL,UAAU,IAAI,IAAI,CAACA,UAAU,CAACpF,KAAM,IACzC,IAAI,CAAC0F,eAAe,IAAI,IAAI,CAACA,eAAe,CAAC1F,KAAM,IACpD,QAAQ;EAChB;EACA,IAAIA,KAAKA,CAACU,QAAQ,EAAE;IAChB,IAAI,CAAC+E,MAAM,GAAG/E,QAAQ;EAC1B;EACA;EACA,IAAIT,mBAAmBA,CAAA,EAAG;IACtB,OAAQ,IAAI,CAACmB,oBAAoB,IAAK,IAAI,CAACgE,UAAU,KAAK,IAAI,IAAI,IAAI,CAACA,UAAU,CAACnF,mBAAoB;EAC1G;EACA,IAAIA,mBAAmBA,CAACZ,KAAK,EAAE;IAC3B,IAAI,CAAC+B,oBAAoB,GAAG/B,KAAK;EACrC;EACA;EACA,IAAIsG,OAAOA,CAAA,EAAG;IACV,OAAO,GAAG,IAAI,CAACJ,EAAE,IAAI,IAAI,CAACK,SAAS,QAAQ;EAC/C;EACAzG,WAAWA,CAACiG,UAAU,EAAES,WAAW,EAAExE,eAAe,EAAEyE,aAAa,EAAET,gBAAgB,EAAEU,aAAa,EAAEL,eAAe,EAAEM,QAAQ,EAAE;IAC7H,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACxE,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACyE,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACT,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACK,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACO,OAAO,GAAGxI,MAAM,CAACC,MAAM,CAAC;IAC7B,IAAI,CAACkI,SAAS,GAAG,aAAa,EAAE3G,YAAY,EAAE;IAC9C;IACA,IAAI,CAACsG,EAAE,GAAG,IAAI,CAACK,SAAS;IACxB;IACA,IAAI,CAACM,aAAa,GAAG,KAAK;IAC1B;IACA,IAAI,CAACF,QAAQ,GAAG,CAAC;IACjB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACvE,MAAM,GAAG,IAAItE,YAAY,CAAC,CAAC;IAChC;IACA,IAAI,CAACgI,QAAQ,GAAG,KAAK;IACrB;IACA,IAAI,CAAC1E,MAAM,GAAG,IAAI;IAClB;IACA,IAAI,CAAC0F,8BAA8B,GAAG,MAAM,CAAE,CAAC;IAC/C,IAAI,CAACC,SAAS,GAAG3I,MAAM,CAACE,QAAQ,CAAC;IACjC;IACA,IAAI,CAAC0I,aAAa,GAAIC,KAAK,IAAK;MAC5B;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACtF,QAAQ,IAAI,IAAI,CAACf,mBAAmB,EAAE;QAC3CqG,KAAK,CAACC,cAAc,CAAC,CAAC;MAC1B;IACJ,CAAC;IACD;IACA;IACA,IAAI,CAACnB,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACoB,eAAe,GAAGT,aAAa,KAAK,gBAAgB;IACzD,IAAI,CAAC3E,oBAAoB,GAAGsE,eAAe,EAAEzF,mBAAmB,IAAI,KAAK;IACzE,IAAI+F,QAAQ,EAAE;MACV,IAAI,CAACA,QAAQ,GAAGpI,eAAe,CAACoI,QAAQ,EAAE,CAAC,CAAC;IAChD;EACJ;EACA;EACAS,KAAKA,CAACC,OAAO,EAAEC,MAAM,EAAE;IACnB,IAAIA,MAAM,EAAE;MACR,IAAI,CAACb,aAAa,CAACc,QAAQ,CAAC,IAAI,CAACC,aAAa,EAAEF,MAAM,EAAED,OAAO,CAAC;IACpE,CAAC,MACI;MACD,IAAI,CAACG,aAAa,CAACC,aAAa,CAACL,KAAK,CAACC,OAAO,CAAC;IACnD;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIrE,aAAaA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAAChB,eAAe,CAACqB,YAAY,CAAC,CAAC;EACvC;EACAqE,QAAQA,CAAA,EAAG;IACP,IAAI,IAAI,CAAC3B,UAAU,EAAE;MACjB;MACA,IAAI,CAACtE,OAAO,GAAG,IAAI,CAACsE,UAAU,CAAC/F,KAAK,KAAK,IAAI,CAACoB,MAAM;MACpD,IAAI,IAAI,CAACK,OAAO,EAAE;QACd,IAAI,CAACsE,UAAU,CAACrE,QAAQ,GAAG,IAAI;MACnC;MACA;MACA,IAAI,CAACb,IAAI,GAAG,IAAI,CAACkF,UAAU,CAAClF,IAAI;IACpC;IACA,IAAI,CAACiG,8BAA8B,GAAG,IAAI,CAACd,gBAAgB,CAAC2B,MAAM,CAAC,CAACzB,EAAE,EAAErF,IAAI,KAAK;MAC7E,IAAIqF,EAAE,KAAK,IAAI,CAACA,EAAE,IAAIrF,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;QACtC,IAAI,CAACY,OAAO,GAAG,KAAK;MACxB;IACJ,CAAC,CAAC;EACN;EACAmG,SAASA,CAAA,EAAG;IACR,IAAI,CAACC,eAAe,CAAC,CAAC;EAC1B;EACAC,eAAeA,CAAA,EAAG;IACd,IAAI,CAACD,eAAe,CAAC,CAAC;IACtB,IAAI,CAACpB,aAAa,CAACsB,OAAO,CAAC,IAAI,CAACvB,WAAW,EAAE,IAAI,CAAC,CAAC/D,SAAS,CAACuF,WAAW,IAAI;MACxE,IAAI,CAACA,WAAW,IAAI,IAAI,CAACjC,UAAU,EAAE;QACjC,IAAI,CAACA,UAAU,CAACjD,MAAM,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC;IACF;IACA;IACA;IACA,IAAI,CAAC8D,OAAO,CAACqB,iBAAiB,CAAC,MAAM;MACjC,IAAI,CAACT,aAAa,CAACC,aAAa,CAACS,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAClB,aAAa,CAAC;IAClF,CAAC,CAAC;EACN;EACApE,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAAC4E,aAAa,EAAEC,aAAa,CAACU,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAACnB,aAAa,CAAC;IAClF,IAAI,CAACP,aAAa,CAAC2B,cAAc,CAAC,IAAI,CAAC5B,WAAW,CAAC;IACnD,IAAI,CAACM,8BAA8B,CAAC,CAAC;EACzC;EACA;EACA5D,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACd,MAAM,CAACe,IAAI,CAAC,IAAItD,cAAc,CAAC,IAAI,EAAE,IAAI,CAACuB,MAAM,CAAC,CAAC;EAC3D;EACAiH,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACxB,aAAa,IAAI,IAAI,CAAClF,QAAQ;EAC9C;EACA;EACA2G,mBAAmBA,CAACrB,KAAK,EAAE;IACvB;IACA;IACA;IACAA,KAAK,CAACsB,eAAe,CAAC,CAAC;IACvB,IAAI,CAAC,IAAI,CAAC9G,OAAO,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;MACjC,MAAM6G,iBAAiB,GAAG,IAAI,CAACzC,UAAU,IAAI,IAAI,CAAC/F,KAAK,KAAK,IAAI,CAAC+F,UAAU,CAAC/F,KAAK;MACjF,IAAI,CAACyB,OAAO,GAAG,IAAI;MACnB,IAAI,CAACyB,gBAAgB,CAAC,CAAC;MACvB,IAAI,IAAI,CAAC6C,UAAU,EAAE;QACjB,IAAI,CAACA,UAAU,CAAC7D,6BAA6B,CAAC,IAAI,CAAClC,KAAK,CAAC;QACzD,IAAIwI,iBAAiB,EAAE;UACnB,IAAI,CAACzC,UAAU,CAAC7C,gBAAgB,CAAC,CAAC;QACtC;MACJ;IACJ;EACJ;EACA;EACAuF,mBAAmBA,CAACxB,KAAK,EAAE;IACvB,IAAI,CAACqB,mBAAmB,CAACrB,KAAK,CAAC;IAC/B,IAAI,CAAC,IAAI,CAACtF,QAAQ,IAAI,IAAI,CAACf,mBAAmB,EAAE;MAC5C;MACA;MACA,IAAI,CAAC4G,aAAa,EAAEC,aAAa,CAACL,KAAK,CAAC,CAAC;IAC7C;EACJ;EACA;EACAjB,YAAYA,CAACnG,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC4B,SAAS,KAAK5B,KAAK,EAAE;MAC1B,IAAI,CAAC4B,SAAS,GAAG5B,KAAK;MACtB,IAAI,CAACgC,eAAe,CAACqB,YAAY,CAAC,CAAC;IACvC;EACJ;EACA;EACAwE,eAAeA,CAAA,EAAG;IACd,MAAMa,KAAK,GAAG,IAAI,CAAC3C,UAAU;IAC7B,IAAI/F,KAAK;IACT;IACA;IACA;IACA;IACA,IAAI,CAAC0I,KAAK,IAAI,CAACA,KAAK,CAAChH,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE;MAC5C3B,KAAK,GAAG,IAAI,CAAC2G,QAAQ;IACzB,CAAC,MACI;MACD3G,KAAK,GAAG0I,KAAK,CAAChH,QAAQ,KAAK,IAAI,GAAG,IAAI,CAACiF,QAAQ,GAAG,CAAC,CAAC;IACxD;IACA,IAAI3G,KAAK,KAAK,IAAI,CAAC2I,iBAAiB,EAAE;MAClC;MACA;MACA,MAAMC,KAAK,GAAG,IAAI,CAACpB,aAAa,EAAEC,aAAa;MAC/C,IAAImB,KAAK,EAAE;QACPA,KAAK,CAACC,YAAY,CAAC,UAAU,EAAE7I,KAAK,GAAG,EAAE,CAAC;QAC1C,IAAI,CAAC2I,iBAAiB,GAAG3I,KAAK;QAC9B;QACAxB,eAAe,CAAC,MAAM;UAClBsK,cAAc,CAAC,MAAM;YACjB;YACA;YACA;YACA;YACA,IAAIJ,KAAK,IACLA,KAAK,CAAChH,QAAQ,IACdgH,KAAK,CAAChH,QAAQ,KAAK,IAAI,IACvBqH,QAAQ,CAACC,aAAa,KAAKJ,KAAK,EAAE;cAClCF,KAAK,CAAChH,QAAQ,EAAE8F,aAAa,CAACC,aAAa,CAACL,KAAK,CAAC,CAAC;cACnD;cACA;cACA,IAAI2B,QAAQ,CAACC,aAAa,KAAKJ,KAAK,EAAE;gBAClC,IAAI,CAACpB,aAAa,CAACC,aAAa,CAACwB,IAAI,CAAC,CAAC;cAC3C;YACJ;UACJ,CAAC,CAAC;QACN,CAAC,EAAE;UAAEC,QAAQ,EAAE,IAAI,CAACnC;QAAU,CAAC,CAAC;MACpC;IACJ;EACJ;EACA;IAAS,IAAI,CAACpD,IAAI,YAAAwF,uBAAAtF,iBAAA;MAAA,YAAAA,iBAAA,IAA+Fa,cAAc,EAzUxB/G,EAAE,CAAAmG,iBAAA,CAyUwCxD,eAAe,MAzUzD3C,EAAE,CAAAmG,iBAAA,CAyUoFnG,EAAE,CAACe,UAAU,GAzUnGf,EAAE,CAAAmG,iBAAA,CAyU8GnG,EAAE,CAACoG,iBAAiB,GAzUpIpG,EAAE,CAAAmG,iBAAA,CAyU+IrG,EAAE,CAAC2L,YAAY,GAzUhKzL,EAAE,CAAAmG,iBAAA,CAyU2KpG,EAAE,CAAC2L,yBAAyB,GAzUzM1L,EAAE,CAAAmG,iBAAA,CAyUoNrF,qBAAqB,MAzU3Od,EAAE,CAAAmG,iBAAA,CAyUsQvD,yBAAyB,MAzUjS5C,EAAE,CAAA2L,iBAAA,CAyU4T,UAAU;IAAA,CAA6D;EAAE;EAC9e;IAAS,IAAI,CAACC,IAAI,kBA1UqF5L,EAAE,CAAA6L,iBAAA;MAAAtF,IAAA,EA0UJQ,cAAc;MAAAP,SAAA;MAAAsF,SAAA,WAAAC,qBAAApF,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UA1UZ3G,EAAE,CAAAgM,WAAA,CAAAlK,GAAA;UAAF9B,EAAE,CAAAgM,WAAA,CAAAjK,GAAA,KA0UihDhB,UAAU;QAAA;QAAA,IAAA4F,EAAA;UAAA,IAAAK,EAAA;UA1U7hDhH,EAAE,CAAAiH,cAAA,CAAAD,EAAA,GAAFhH,EAAE,CAAAkH,WAAA,QAAAN,GAAA,CAAAiD,aAAA,GAAA7C,EAAA,CAAAiF,KAAA;UAAFjM,EAAE,CAAAiH,cAAA,CAAAD,EAAA,GAAFhH,EAAE,CAAAkH,WAAA,QAAAN,GAAA,CAAAsF,cAAA,GAAAlF,EAAA,CAAAiF,KAAA;QAAA;MAAA;MAAA9E,SAAA;MAAAgF,QAAA;MAAAC,YAAA,WAAAC,4BAAA1F,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAAF3G,EAAE,CAAAsM,UAAA,mBAAAC,wCAAA;YAAA,OA0UJ3F,GAAA,CAAAiD,aAAA,CAAAC,aAAA,CAAAL,KAAA,CAAkC,CAAC;UAAA,CAAtB,CAAC;QAAA;QAAA,IAAA9C,EAAA;UA1UZ3G,EAAE,CAAAwM,WAAA,OAAA5F,GAAA,CAAA2B,EAAA,cA0UJ,IAAI,gBAAJ,IAAI,qBAAJ,IAAI,sBAAJ,IAAI;UA1UFvI,EAAE,CAAAyM,WAAA,gBAAA7F,GAAA,CAAA5D,KAAA,KA0UM,SAAG,CAAC,eAAA4D,GAAA,CAAA5D,KAAA,KAAJ,QAAG,CAAC,aAAA4D,GAAA,CAAA5D,KAAA,KAAJ,MAAG,CAAC,0BAAA4D,GAAA,CAAA9C,OAAD,CAAC,2BAAA8C,GAAA,CAAA5C,QAAD,CAAC,uCAAA4C,GAAA,CAAA3D,mBAAD,CAAC,4BAAA2D,GAAA,CAAA4C,eAAD,CAAC;QAAA;MAAA;MAAApC,MAAA;QAAAmB,EAAA;QAAArF,IAAA;QAAAwJ,SAAA;QAAAC,cAAA;QAAAC,eAAA;QAAA1D,aAAA,wCAAiS9I,gBAAgB;QAAA4I,QAAA,8BAAuC3G,KAAK,IAAMA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGzB,eAAe,CAACyB,KAAK,CAAE;QAAAyB,OAAA,4BAAmC1D,gBAAgB;QAAAiC,KAAA;QAAAgB,aAAA;QAAAW,QAAA,8BAAsF5D,gBAAgB;QAAA8D,QAAA,8BAAsC9D,gBAAgB;QAAA4C,KAAA;QAAAC,mBAAA,oDAAuF7C,gBAAgB;MAAA;MAAAiH,OAAA;QAAA5C,MAAA;MAAA;MAAA6C,QAAA;MAAAC,UAAA;MAAAC,QAAA,GA1UhtBxH,EAAE,CAAA0H,wBAAA,EAAF1H,EAAE,CAAA6M,mBAAA;MAAAC,kBAAA,EAAA9K,GAAA;MAAA+K,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,wBAAAxG,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAAA,MAAAyG,GAAA,GAAFpN,EAAE,CAAAqN,gBAAA;UAAFrN,EAAE,CAAAsN,eAAA;UAAFtN,EAAE,CAAAuN,cAAA,eA0U8qD,CAAC,YAAqE,CAAC,YAAuJ,CAAC;UA1U/4DvN,EAAE,CAAAsM,UAAA,mBAAAkB,6CAAAC,MAAA;YAAFzN,EAAE,CAAA0N,aAAA,CAAAN,GAAA;YAAA,OAAFpN,EAAE,CAAA2N,WAAA,CA0U+2D/G,GAAA,CAAAkE,mBAAA,CAAA2C,MAA0B,CAAC;UAAA,CAAC,CAAC;UA1U94DzN,EAAE,CAAA4N,YAAA,CA0Uk5D,CAAC;UA1Ur5D5N,EAAE,CAAAuN,cAAA,iBA0Ug+E,CAAC;UA1Un+EvN,EAAE,CAAAsM,UAAA,oBAAAuB,gDAAAJ,MAAA;YAAFzN,EAAE,CAAA0N,aAAA,CAAAN,GAAA;YAAA,OAAFpN,EAAE,CAAA2N,WAAA,CA0Um8E/G,GAAA,CAAA+D,mBAAA,CAAA8C,MAA0B,CAAC;UAAA,CAAC,CAAC;UA1Ul+EzN,EAAE,CAAA4N,YAAA,CA0Ug+E,CAAC;UA1Un+E5N,EAAE,CAAAuN,cAAA,YA0U2gF,CAAC;UA1U9gFvN,EAAE,CAAA8N,SAAA,YA0UgkF,CAAC,YAAoD,CAAC;UA1UxnF9N,EAAE,CAAA4N,YAAA,CA0UioF,CAAC;UA1UpoF5N,EAAE,CAAAuN,cAAA,YA0Uq2F,CAAC;UA1Ux2FvN,EAAE,CAAA8N,SAAA,cA0Ui7F,CAAC;UA1Up7F9N,EAAE,CAAA4N,YAAA,CA0U67F,CAAC,CAAS,CAAC;UA1U18F5N,EAAE,CAAAuN,cAAA,gBA0Uw/F,CAAC;UA1U3/FvN,EAAE,CAAA+N,YAAA,GA0UuhG,CAAC;UA1U1hG/N,EAAE,CAAA4N,YAAA,CA0UmiG,CAAC,CAAO,CAAC;QAAA;QAAA,IAAAjH,EAAA;UA1U9iG3G,EAAE,CAAAgO,UAAA,kBAAApH,GAAA,CAAAvD,aA0UkqD,CAAC;UA1UrqDrD,EAAE,CAAAiO,SAAA,EA0UmvD,CAAC;UA1UtvDjO,EAAE,CAAAyM,WAAA,wBAAA7F,GAAA,CAAA5C,QA0UmvD,CAAC;UA1UtvDhE,EAAE,CAAAiO,SAAA,EA0Uq/D,CAAC;UA1Ux/DjO,EAAE,CAAAgO,UAAA,OAAApH,GAAA,CAAA+B,OA0Uq/D,CAAC,YAAA/B,GAAA,CAAA9C,OAAiC,CAAC,aAAA8C,GAAA,CAAA5C,QAAA,KAAA4C,GAAA,CAAA3D,mBAA2D,CAAC,aAAA2D,GAAA,CAAA1C,QAAuG,CAAC;UA1U9rElE,EAAE,CAAAwM,WAAA,SAAA5F,GAAA,CAAA1D,IAAA,WAAA0D,GAAA,CAAAvE,KAAA,gBAAAuE,GAAA,CAAA8F,SAAA,qBAAA9F,GAAA,CAAA+F,cAAA,sBAAA/F,GAAA,CAAAgG,eAAA,mBAAAhG,GAAA,CAAA5C,QAAA,IAAA4C,GAAA,CAAA3D,mBAAA;UAAFjD,EAAE,CAAAiO,SAAA,EA0UuwF,CAAC;UA1U1wFjO,EAAE,CAAAgO,UAAA,qBAAApH,GAAA,CAAAsF,cAAA,CAAApC,aA0UuwF,CAAC,sBAAAlD,GAAA,CAAA8D,iBAAA,EAAqD,CAAC,0BAAsC,CAAC;UA1Uv2F1K,EAAE,CAAAiO,SAAA,EA0Uu/F,CAAC;UA1U1/FjO,EAAE,CAAAgO,UAAA,QAAApH,GAAA,CAAA+B,OA0Uu/F,CAAC;QAAA;MAAA;MAAAuF,YAAA,GAAwmTzM,SAAS,EAAwPC,qBAAqB;MAAAyM,MAAA;MAAAC,aAAA;MAAAC,eAAA;IAAA,EAAyK;EAAE;AAC9oa;AACA;EAAA,QAAA1G,SAAA,oBAAAA,SAAA,KA5U2G3H,EAAE,CAAA4H,iBAAA,CA4UXb,cAAc,EAAc,CAAC;IACnHR,IAAI,EAAEvF,SAAS;IACf6G,IAAI,EAAE,CAAC;MAAEC,QAAQ,EAAE,kBAAkB;MAAEE,IAAI,EAAE;QACjC,OAAO,EAAE,sBAAsB;QAC/B,WAAW,EAAE,IAAI;QACjB,qBAAqB,EAAE,qBAAqB;QAC5C,oBAAoB,EAAE,oBAAoB;QAC1C,kBAAkB,EAAE,kBAAkB;QACtC,+BAA+B,EAAE,SAAS;QAC1C,gCAAgC,EAAE,UAAU;QAC5C,4CAA4C,EAAE,qBAAqB;QACnE,iCAAiC,EAAE,iBAAiB;QACpD;QACA,iBAAiB,EAAE,MAAM;QACzB,mBAAmB,EAAE,MAAM;QAC3B,wBAAwB,EAAE,MAAM;QAChC,yBAAyB,EAAE,MAAM;QACjC;QACA;QACA;QACA,SAAS,EAAE;MACf,CAAC;MAAEV,QAAQ,EAAE,gBAAgB;MAAE8G,aAAa,EAAEnN,iBAAiB,CAACqN,IAAI;MAAED,eAAe,EAAEnN,uBAAuB,CAACqN,MAAM;MAAEhH,UAAU,EAAE,IAAI;MAAEiH,OAAO,EAAE,CAAC/M,SAAS,EAAEC,qBAAqB,CAAC;MAAEwL,QAAQ,EAAE,28CAA28C;MAAEiB,MAAM,EAAE,CAAC,y/SAAy/S;IAAE,CAAC;EAC9pW,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAE5H,IAAI,EAAE9D,aAAa;IAAEgM,UAAU,EAAE,CAAC;MACnDlI,IAAI,EAAEpF;IACV,CAAC,EAAE;MACCoF,IAAI,EAAEnF,MAAM;MACZyG,IAAI,EAAE,CAAClF,eAAe;IAC1B,CAAC;EAAE,CAAC,EAAE;IAAE4D,IAAI,EAAEvG,EAAE,CAACe;EAAW,CAAC,EAAE;IAAEwF,IAAI,EAAEvG,EAAE,CAACoG;EAAkB,CAAC,EAAE;IAAEG,IAAI,EAAEzG,EAAE,CAAC2L;EAAa,CAAC,EAAE;IAAElF,IAAI,EAAExG,EAAE,CAAC2L;EAA0B,CAAC,EAAE;IAAEnF,IAAI,EAAEmI,SAAS;IAAED,UAAU,EAAE,CAAC;MAC9JlI,IAAI,EAAEpF;IACV,CAAC,EAAE;MACCoF,IAAI,EAAEnF,MAAM;MACZyG,IAAI,EAAE,CAAC/G,qBAAqB;IAChC,CAAC;EAAE,CAAC,EAAE;IAAEyF,IAAI,EAAEmI,SAAS;IAAED,UAAU,EAAE,CAAC;MAClClI,IAAI,EAAEpF;IACV,CAAC,EAAE;MACCoF,IAAI,EAAEnF,MAAM;MACZyG,IAAI,EAAE,CAACjF,yBAAyB;IACpC,CAAC;EAAE,CAAC,EAAE;IAAE2D,IAAI,EAAEmI,SAAS;IAAED,UAAU,EAAE,CAAC;MAClClI,IAAI,EAAElF,SAAS;MACfwG,IAAI,EAAE,CAAC,UAAU;IACrB,CAAC;EAAE,CAAC,CAAC,EAAkB;IAAEU,EAAE,EAAE,CAAC;MAC9BhC,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAE0C,IAAI,EAAE,CAAC;MACPqD,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAEkM,SAAS,EAAE,CAAC;MACZnG,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC,YAAY;IACvB,CAAC,CAAC;IAAE8E,cAAc,EAAE,CAAC;MACjBpG,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAE+E,eAAe,EAAE,CAAC;MAClBrG,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC,kBAAkB;IAC7B,CAAC,CAAC;IAAEqB,aAAa,EAAE,CAAC;MAChB3C,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAE4I,QAAQ,EAAE,CAAC;MACXzC,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QACCK,SAAS,EAAG7F,KAAK,IAAMA,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGzB,eAAe,CAACyB,KAAK;MACpE,CAAC;IACT,CAAC,CAAC;IAAEyB,OAAO,EAAE,CAAC;MACVyC,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAEiC,KAAK,EAAE,CAAC;MACRkE,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAE6C,aAAa,EAAE,CAAC;MAChBkD,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAEwD,QAAQ,EAAE,CAAC;MACXuC,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAE8D,QAAQ,EAAE,CAAC;MACXqC,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAE4C,KAAK,EAAE,CAAC;MACRuD,IAAI,EAAE/F;IACV,CAAC,CAAC;IAAEyC,mBAAmB,EAAE,CAAC;MACtBsD,IAAI,EAAE/F,KAAK;MACXqH,IAAI,EAAE,CAAC;QAAEK,SAAS,EAAE9H;MAAiB,CAAC;IAC1C,CAAC,CAAC;IAAEqE,MAAM,EAAE,CAAC;MACT8B,IAAI,EAAEjG;IACV,CAAC,CAAC;IAAEuJ,aAAa,EAAE,CAAC;MAChBtD,IAAI,EAAEjF,SAAS;MACfuG,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAEqE,cAAc,EAAE,CAAC;MACjB3F,IAAI,EAAEjF,SAAS;MACfuG,IAAI,EAAE,CAAC,WAAW,EAAE;QAAE8G,IAAI,EAAE5N,UAAU;QAAE6N,MAAM,EAAE;MAAK,CAAC;IAC1D,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAMC,cAAc,CAAC;EACjB;IAAS,IAAI,CAAC7I,IAAI,YAAA8I,uBAAA5I,iBAAA;MAAA,YAAAA,iBAAA,IAA+F2I,cAAc;IAAA,CAAkD;EAAE;EACnL;IAAS,IAAI,CAACE,IAAI,kBAvaqF/O,EAAE,CAAAgP,gBAAA;MAAAzI,IAAA,EAuaSsI;IAAc,EAAwJ;EAAE;EAC1R;IAAS,IAAI,CAACI,IAAI,kBAxaqFjP,EAAE,CAAAkP,gBAAA;MAAAV,OAAA,GAwamC7M,eAAe,EAAEE,YAAY,EAAED,eAAe,EAAEmF,cAAc,EAAEpF,eAAe;IAAA,EAAI;EAAE;AACrO;AACA;EAAA,QAAAgG,SAAA,oBAAAA,SAAA,KA1a2G3H,EAAE,CAAA4H,iBAAA,CA0aXiH,cAAc,EAAc,CAAC;IACnHtI,IAAI,EAAEhF,QAAQ;IACdsG,IAAI,EAAE,CAAC;MACC2G,OAAO,EAAE,CAAC7M,eAAe,EAAEE,YAAY,EAAED,eAAe,EAAEa,aAAa,EAAEsE,cAAc,CAAC;MACxFoI,OAAO,EAAE,CAACxN,eAAe,EAAEc,aAAa,EAAEsE,cAAc;IAC5D,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASnE,yBAAyB,EAAEG,iCAAiC,EAAEJ,eAAe,EAAEL,sCAAsC,EAAEyE,cAAc,EAAE7E,cAAc,EAAEO,aAAa,EAAEoM,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}