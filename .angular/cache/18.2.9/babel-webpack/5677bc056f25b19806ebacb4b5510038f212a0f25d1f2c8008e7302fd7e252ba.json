{"ast":null,"code":"import { environment } from 'src/environments/environment.prod';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersListService {\n  constructor(http) {\n    this.http = http;\n    this.path = environment.api;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  getUsersList() {\n    const url = this.path + '/Users';\n    return this.http.get(url);\n  }\n  setUser(userObject) {\n    const url = this.path + '/Users';\n    this.http.post(url, JSON.stringify(userObject), {\n      headers: this.headers\n    }).subscribe({\n      next: rta => console.log('Respuesta del servidor:', rta),\n      error: error => {\n        console.error('Error de validación:', error.error.errors);\n        if (error.error.errors) {\n          for (const key in error.error.errors) {\n            if (error.error.errors.hasOwnProperty(key)) {\n              console.log(`Error en el campo ${key}:`, error.error.errors[key]);\n            }\n          }\n        }\n      }\n    });\n  }\n  updateUser(userObject, userId) {\n    const url = this.path + '/Users/' + userId;\n    this.http.put(url, JSON.stringify(userObject), {\n      headers: this.headers\n    }).subscribe({\n      next: rta => console.log('Respuesta del servidor:', rta),\n      error: error => {\n        console.error('Error de validación:', error.error.errors);\n        if (error.error.errors) {\n          for (const key in error.error.errors) {\n            if (error.error.errors.hasOwnProperty(key)) {\n              console.log(`Error en el campo ${key}:`, error.error.errors[key]);\n            }\n          }\n        }\n      }\n    });\n  }\n  static {\n    this.ɵfac = function UsersListService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UsersListService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsersListService,\n      factory: UsersListService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","HttpHeaders","UsersListService","constructor","http","path","api","headers","getUsersList","url","get","setUser","userObject","post","JSON","stringify","subscribe","next","rta","console","log","error","errors","key","hasOwnProperty","updateUser","userId","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\UNIVERSIDAD\\TRABAJOS free\\master\\material-pro-angular-lite-master\\package\\src\\app\\services\\users-list.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment.prod';\r\nimport { User } from '../interfaces/UsersInterfaces';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UsersListService {\r\n  private path = environment.api;\r\n  private headers = new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n  });\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUsersList() {\r\n    const url = this.path + '/Users';\r\n    return this.http.get<User[]>(url);\r\n  }\r\n\r\n  setUser(userObject: User) {\r\n    const url = this.path + '/Users';\r\n\r\n    this.http\r\n      .post(url, JSON.stringify(userObject), { headers: this.headers })\r\n      .subscribe({\r\n        next: (rta) => console.log('Respuesta del servidor:', rta),\r\n        error: (error) => {\r\n          console.error('Error de validación:', error.error.errors);\r\n          if (error.error.errors) {\r\n            for (const key in error.error.errors) {\r\n              if (error.error.errors.hasOwnProperty(key)) {\r\n                console.log(\r\n                  `Error en el campo ${key}:`,\r\n                  error.error.errors[key]\r\n                );\r\n              }\r\n            }\r\n          }\r\n        },\r\n      });\r\n  }\r\n\r\n  updateUser(userObject: User, userId : number) {\r\n    const url = this.path + '/Users/' + userId;\r\n\r\n    this.http\r\n      .put(url, JSON.stringify(userObject), { headers: this.headers })\r\n      .subscribe({\r\n        next: (rta) => console.log('Respuesta del servidor:', rta),\r\n        error: (error) => {\r\n          console.error('Error de validación:', error.error.errors);\r\n          if (error.error.errors) {\r\n            for (const key in error.error.errors) {\r\n              if (error.error.errors.hasOwnProperty(key)) {\r\n                console.log(\r\n                  `Error en el campo ${key}:`,\r\n                  error.error.errors[key]\r\n                );\r\n              }\r\n            }\r\n          }\r\n        },\r\n      });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,mCAAmC;AAE/D,SAAqBC,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,gBAAgB;EAM3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,IAAI,GAAGL,WAAW,CAACM,GAAG;IACtB,KAAAC,OAAO,GAAG,IAAIN,WAAW,CAAC;MAChC,cAAc,EAAE;KACjB,CAAC;EAEqC;EAEvCO,YAAYA,CAAA;IACV,MAAMC,GAAG,GAAG,IAAI,CAACJ,IAAI,GAAG,QAAQ;IAChC,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAASD,GAAG,CAAC;EACnC;EAEAE,OAAOA,CAACC,UAAgB;IACtB,MAAMH,GAAG,GAAG,IAAI,CAACJ,IAAI,GAAG,QAAQ;IAEhC,IAAI,CAACD,IAAI,CACNS,IAAI,CAACJ,GAAG,EAAEK,IAAI,CAACC,SAAS,CAACH,UAAU,CAAC,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAChES,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC1DG,KAAK,EAAGA,KAAK,IAAI;QACfF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACA,KAAK,CAACC,MAAM,CAAC;QACzD,IAAID,KAAK,CAACA,KAAK,CAACC,MAAM,EAAE;UACtB,KAAK,MAAMC,GAAG,IAAIF,KAAK,CAACA,KAAK,CAACC,MAAM,EAAE;YACpC,IAAID,KAAK,CAACA,KAAK,CAACC,MAAM,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;cAC1CJ,OAAO,CAACC,GAAG,CACT,qBAAqBG,GAAG,GAAG,EAC3BF,KAAK,CAACA,KAAK,CAACC,MAAM,CAACC,GAAG,CAAC,CACxB;YACH;UACF;QACF;MACF;KACD,CAAC;EACN;EAEAE,UAAUA,CAACb,UAAgB,EAAEc,MAAe;IAC1C,MAAMjB,GAAG,GAAG,IAAI,CAACJ,IAAI,GAAG,SAAS,GAAGqB,MAAM;IAE1C,IAAI,CAACtB,IAAI,CACNuB,GAAG,CAAClB,GAAG,EAAEK,IAAI,CAACC,SAAS,CAACH,UAAU,CAAC,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAC/DS,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MAC1DG,KAAK,EAAGA,KAAK,IAAI;QACfF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACA,KAAK,CAACC,MAAM,CAAC;QACzD,IAAID,KAAK,CAACA,KAAK,CAACC,MAAM,EAAE;UACtB,KAAK,MAAMC,GAAG,IAAIF,KAAK,CAACA,KAAK,CAACC,MAAM,EAAE;YACpC,IAAID,KAAK,CAACA,KAAK,CAACC,MAAM,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;cAC1CJ,OAAO,CAACC,GAAG,CACT,qBAAqBG,GAAG,GAAG,EAC3BF,KAAK,CAACA,KAAK,CAACC,MAAM,CAACC,GAAG,CAAC,CACxB;YACH;UACF;QACF;MACF;KACD,CAAC;EACN;;;uCAzDWrB,gBAAgB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAhB7B,gBAAgB;MAAA8B,OAAA,EAAhB9B,gBAAgB,CAAA+B,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}